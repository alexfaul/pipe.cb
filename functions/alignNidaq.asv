function [dsnidaq]=alignNidaq(path, OS, graph,dataDirectory)
%% whether to generate graphs
if nargin < 3, graph=1; end
if nargin < 4,  dataDirectory    ='Z:\AFdata\2p2019\Experiments';  end   %% Change if working in entirely different drive. If data falls anywhere below 2p2019, this is okay.
%% creating paths to load
if contains(path,'.sbx')==1;            % Account for different potential inputs 
    root=extractBefore(path, '.sbx');% So this can accept either paths without extension, with .sbx or _nidaq.mat at end
  nidaqPath=[root '_nidaq.mat'] ;%     nidaqPath = fileparts(root) 
end %%% need a .sbx input
if nargin<2,OS='PC'; end
%%%%%%%%
% ['_nidaq.mat'] ;
%elseif contains(path,'_nidaq.mat')==1;
%     nidaqPath=path;
%elseif contains(path,'_nidaq.mat')==0 && contains(path,'.sbx')==0;
%    nidaqPath = [path '_nidaq.mat'] ;
%end 
%% Check for presence of nidaq file

% nidaqPath=findFILE(nidaqPath,'nidaq.mat',OS)

try nidaq=load(nidaqPath);
catch
    sprintf('No nidaq file written, check ReadsbxEphys was run and/or .sbx is available')
    dsnidaq=[]
    return
end 
%% binarize signals
%%% THERE NEEDS TO BE A WAY TO MAKE THIS MORE ROBUST. We should always have
%%% decent separation (>1.5), but if this changes, all signals binarized
%%% wrong

for i=1:length(nidaq.ensure);                             %%makes indexing much easier
    if nidaq.ensure(i)>1.5;
    nidaq2.ensure(i)=4;
    else 
    nidaq2.ensure(i)=0;
    end 
end
for i=1:length(nidaq.visstim);                             
    if nidaq.visstim(i)>1.5;
    nidaq2.visstim(i)=4;
    else 
    nidaq2.visstim(i)=1;
    end 
end

for i=1:length(nidaq.shock);                             
    if nidaq.shock(i)>1.5;
    nidaq2.shock(i)=5;
    else 
    nidaq2.shock(i)=0.5;
    end 
end

for i=1:length(nidaq.licking);                             
    if nidaq.licking(i)>=1.5;
    nidaq2.licking(i)=1;
    else 
    nidaq2.licking(i)=0;
    end 
end

% % % % % % 
%% Save non-mutable properties
dsnidaq.EEG=nidaq.EEG; %not downsampling EEG here. Will downsample according to specific needs
dsnidaq.Fs=nidaq.Fs;
dsnidaq.rig=nidaq.rig;
dsnidaq.framerate=nidaq.framerate;
if isfield(nidaq, 'eyeframerate')
    dsnidaq.eyeframerate=nidaq.eyeframerate;
end 
dsnidaq.mouse=nidaq.mouse;
dsnidaq.date=nidaq.date;
dsnidaq.run=nidaq.run;
dsnidaq.config=nidaq.config;

if isfield(nidaq,'quad')
dsnidaq.quad=single(nidaq.quad);
dsnidaq.runVel=single(nidaq.runningVelocity);
end 

%% If file already exists, append config information

[filepath]=fileparts(nidaqPath)
dsNidaqPath=[filepath,'\',nidaq.mouse,'_',num2str(nidaq.date),'_', num2str(nidaq.run),'_','dsNidaq.mat'];
%   if isfile(dsNidaqPath) 
%      config=dsnidaq.config;
%     clearvars -except config dsNidaqPath
%    load(dsNidaqPath); %%%switch back for animals other than T03
%     dsnidaq.config=config;
%     save(dsNidaqPath, '-struct', 'dsnidaq');

% %  m = matfile(dsNidaqPath,'Writable',true); 
% % m.config=dsnidaq.config;
% 
%  disp('File exists, appending missing fields')
%  else ~isfile(dsNidaqPath)

%% Find pulses to align
C = find(diff(nidaq.frames2p)==3);
%% Check for presence of 2p pulses and if does not exist, substitute in another run
while length(C)<nidaq.nframes               %  while should keep this looping until finds a suitable 2p frames substitution
nframes=num2str(nidaq.nframes);
dlgtitle = [nframes ' pulses found ' 'Number of 2p pulses ~= # frames']
dims = [1 80];
prompt = {'Please name of nidaq file (e.g. W05_200415_001) to substitute 2p pulses'}; % entered as plain text (no quotation marks etc, its string in cell as default)
answer = inputdlg(prompt,dlgtitle,dims); 

if contains(answer{1},'_nidaq.mat')==0;
    ext = [answer{1} '_nidaq.mat'] ;
elseif contains(answer{:},'_nidaq.mat')==1;
    ext = answer{1};
end
backupPath = findFILE(dataDirectory,ext,OS);

if isempty(backupPath) %possibly entered date wrong, give 2nd chance
    dlgtitle = [nframes ' pulses found ' 'Number of 2p pulses ~= # frames']
dims = [1 80];
prompt = {'Please name of nidaq file (e.g. W05_200415_001) to substitute 2p pulses'}; % entered as plain text (no quotation marks etc, its string in cell as default)
answer = inputdlg(prompt,dlgtitle,dims); 
end 
    
backupNidaq=load(backupPath{1});
%check length - can vary even in same frame # runs
if length(backupNidaq.frames2p)~=length(nidaq.EMG)
    if length(backupNidaq.frames2p)>length(nidaq.EMG)
        backupNidaq.frames2p=backupNidaq.frames2p(1:length(nidaq.EMG));
    if length(backupNidaq.frames2p)<length(nidaq.EMG)
       sprintf('substitute nidaq too short')
       continue
    end
    end
end
C = find(diff(backupNidaq.frames2p)==3);                                %% Make sure you're frames2p here is fully BINARIZED!!
nidaq.frames2p=backupNidaq.frames2p;
  if length(C)<nidaq.nframes && length(nidaq.frames2p)~=length(nidaq.EMG) %% can be any field here, just want same length vectors imported in to sub 
    continue
  end
end

%% Adjust for diff idx effect and cut off if pulses exceed nframes (extra pulses at end - very rare)
C=C+1;                                      % adjusts to be index of actual pulse instead of shifted by 1 bc of diff 
C=C(1:nidaq.nframes);
%% Downsampling by 2p pulses

% CONDENSE THIS?
dsnidaq.visstim=nidaq2.visstim(C);
dsnidaq.timeStamps2p=nidaq.timeStamps(C)';
dsnidaq.shock=nidaq2.shock(C);
dsnidaq.ensure=nidaq2.ensure(C);
dsnidaq.quinine=nidaq.quinine(C);
dsnidaq.frames2p=nidaq.frames2p(C);
dsnidaq.EMG=nidaq.EMG(C);

%% All other signals downsample fine EXCEPT for licks
%Lick pulses last ~100 ms, so can miss their onset/offset if only indexing
%by 2p pulses (if the pulse happens in middle of lick signal)

lickOnsets=diff(nidaq2.licking);          % Create a temporary trace that finds the onset of licks from
                                                % the original 1000 Hz trace
lickOnsets=[0,lickOnsets];                      % adjust for the diff. 
lickOnsets(lickOnsets<0)=0;

Ctemp=[1,C];                        % create 1-idx frame# 
for ii=2:(length(Ctemp))
   dsnidaq.licking(ii-1)=sum(lickOnsets(Ctemp(ii-1):Ctemp(ii)-1));          %extract for time period between frames, adjusted for window edges
end    
%sum across lickOnsets that occur w/in isolated window
% 
% load('C:\Users\alexfaul\Documents\MATLAB\LickFixW03W04.mat')
%  dsnidaq.licking=W04_200220_001;
%% check for visstim off by 1 errors on both sides


%%%%%%%%%%%%%%%%%% CHECK VISSTIM POSSIBILITIES
%-when monkeylogic isn't up
%-when up but space not pushed
%-when 
if dsnidaq.visstim(1)==5,               %if visstim trace already at 5
dsnidaq.onsetOffBy1=1;
else dsnidaq.onsetOffBy1=0; end 

if dsnidaq.visstim(end)==5,
dsnidaq.offsetOffBy1=1;
else dsnidaq.offsetOffBy1=0; end 


dsnidaq.trialonsets = find(diff(dsnidaq.visstim)>=1)+1';   %%% temp offset variable bc if trial is rewarded, the offset is wrong bc monkeylogic hates me
dsnidaq.trialoffsetsTemp= find(diff(dsnidaq.visstim)<=-1)+1';  %All of these are +1 bc of fencepost of diff
dsnidaq.ensureOnsets=find(diff(dsnidaq.ensure)>=1)+1';
numVisstim=min(length(dsnidaq.trialonsets),length(dsnidaq.trialoffsetsTemp))
%% Plots to compare downsampled vs standard
% nidaqPath=nidaqPath{:} %assumption of cell
[~,plotName]=fileparts(nidaqPath)
%clean this up
if graph==1
figure
sgtitle([plotName ' downsample'], 'Interpreter', 'none')
subplot(3,2,1)
plot(dsnidaq.timeStamps2p,dsnidaq.shock)
hold on
plot(nidaq.timeStamps, nidaq.shock)
legend('Downsampled','original');
title('Shock')

subplot(3,2,2)
plot(dsnidaq.timeStamps2p,dsnidaq.quinine);
hold on
plot(nidaq.timeStamps, nidaq.quinine)
title('Quinine'), ylim([-5 5])

subplot(3,2,3)
plot(dsnidaq.timeStamps2p,dsnidaq.ensure);
hold on
plot(nidaq.timeStamps, nidaq.ensure)
title('Ensure'), ylim([-5 5])

subplot(3,2,4)
plot(dsnidaq.timeStamps2p,dsnidaq.licking);
hold on
plot(nidaq.timeStamps, nidaq.licking)
title('Licking'), ylim([-5 5])

subplot(3,2,5)
plot(dsnidaq.timeStamps2p,dsnidaq.frames2p);
hold on
plot(nidaq.timeStamps(1:length(nidaq.frames2p)), nidaq.frames2p)
title('Frames 2p')

subplot(3,2,6)
plot(dsnidaq.timeStamps2p,dsnidaq.visstim);
hold on
plot(nidaq.timeStamps, nidaq.visstim)
ylim([-1 6]), title('Visstim')
end
%% Save structure
save(dsNidaqPath, '-struct', 'dsnidaq');
% end
end
